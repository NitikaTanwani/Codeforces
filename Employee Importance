/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    public int getImportance(List<Employee> employees, int id) {
        int set=0;
        int imp=0;
        int a=0;
        int p=0;
        for(int i=0;i<employees.size();i++)
        {
            if (employees.get(i).id==id)
            {
                set=i;
                
            }
        }
        HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();  
        for(int i=0;i<employees.size();i++)
        {
            hm.put(employees.get(i).id,employees.get(i).importance);
        }
        imp=imp+employees.get(set).importance;
        if(employees.get(set).subordinates.size()!=0)
        {
            /*int imp=imp+ recurse(employees.get(set).subordinates);
            int recurse(List<Integer> emp)
            {
                if(employees.get(set).subordinates.size()!=0)
                {
                    int imp=imp+
                }
            }*/
            p=employees.get(set).subordinates.size();
            for (int j=0;j<p;j++)
            {
                a=(employees.get(set)).subordinates.get(j);
                imp=imp+hm.get(a);
            }
         return imp;   
        }
        return imp;
        
        
    }
}
